/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.meynier.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroBook extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1279453697194289200L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroBook\",\"namespace\":\"com.meynier.kafka.avro.model\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"publish_date\",\"type\":[\"int\"]},{\"name\":\"price\",\"type\":[\"float\"]},{\"name\":\"author\",\"type\":[{\"type\":\"record\",\"name\":\"AvroAuthor\",\"doc\":\"A book author\",\"fields\":[{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"family_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birth_date\",\"type\":\"int\"}]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroBook> ENCODER =
      new BinaryMessageEncoder<AvroBook>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroBook> DECODER =
      new BinaryMessageDecoder<AvroBook>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroBook> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroBook> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroBook> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroBook>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroBook to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroBook from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroBook instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroBook fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.Object publish_date;
  @Deprecated public java.lang.Object price;
  @Deprecated public com.meynier.kafka.avro.model.AvroAuthor author;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroBook() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param publish_date The new value for publish_date
   * @param price The new value for price
   * @param author The new value for author
   */
  public AvroBook(java.lang.String name, java.lang.Object publish_date, java.lang.Object price, com.meynier.kafka.avro.model.AvroAuthor author) {
    this.name = name;
    this.publish_date = publish_date;
    this.price = price;
    this.author = author;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return publish_date;
    case 2: return price;
    case 3: return author;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: publish_date = value$; break;
    case 2: price = value$; break;
    case 3: author = (com.meynier.kafka.avro.model.AvroAuthor)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'publish_date' field.
   * @return The value of the 'publish_date' field.
   */
  public java.lang.Object getPublishDate() {
    return publish_date;
  }


  /**
   * Sets the value of the 'publish_date' field.
   * @param value the value to set.
   */
  public void setPublishDate(java.lang.Object value) {
    this.publish_date = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Object getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Object value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'author' field.
   * @return The value of the 'author' field.
   */
  public com.meynier.kafka.avro.model.AvroAuthor getAuthor() {
    return author;
  }


  /**
   * Sets the value of the 'author' field.
   * @param value the value to set.
   */
  public void setAuthor(com.meynier.kafka.avro.model.AvroAuthor value) {
    this.author = value;
  }

  /**
   * Creates a new AvroBook RecordBuilder.
   * @return A new AvroBook RecordBuilder
   */
  public static com.meynier.kafka.avro.model.AvroBook.Builder newBuilder() {
    return new com.meynier.kafka.avro.model.AvroBook.Builder();
  }

  /**
   * Creates a new AvroBook RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroBook RecordBuilder
   */
  public static com.meynier.kafka.avro.model.AvroBook.Builder newBuilder(com.meynier.kafka.avro.model.AvroBook.Builder other) {
    if (other == null) {
      return new com.meynier.kafka.avro.model.AvroBook.Builder();
    } else {
      return new com.meynier.kafka.avro.model.AvroBook.Builder(other);
    }
  }

  /**
   * Creates a new AvroBook RecordBuilder by copying an existing AvroBook instance.
   * @param other The existing instance to copy.
   * @return A new AvroBook RecordBuilder
   */
  public static com.meynier.kafka.avro.model.AvroBook.Builder newBuilder(com.meynier.kafka.avro.model.AvroBook other) {
    if (other == null) {
      return new com.meynier.kafka.avro.model.AvroBook.Builder();
    } else {
      return new com.meynier.kafka.avro.model.AvroBook.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroBook instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroBook>
    implements org.apache.avro.data.RecordBuilder<AvroBook> {

    private java.lang.String name;
    private java.lang.Object publish_date;
    private java.lang.Object price;
    private com.meynier.kafka.avro.model.AvroAuthor author;
    private com.meynier.kafka.avro.model.AvroAuthor.Builder authorBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.meynier.kafka.avro.model.AvroBook.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.publish_date)) {
        this.publish_date = data().deepCopy(fields()[1].schema(), other.publish_date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.author)) {
        this.author = data().deepCopy(fields()[3].schema(), other.author);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasAuthorBuilder()) {
        this.authorBuilder = com.meynier.kafka.avro.model.AvroAuthor.newBuilder(other.getAuthorBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroBook instance
     * @param other The existing instance to copy.
     */
    private Builder(com.meynier.kafka.avro.model.AvroBook other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.publish_date)) {
        this.publish_date = data().deepCopy(fields()[1].schema(), other.publish_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.author)) {
        this.author = data().deepCopy(fields()[3].schema(), other.author);
        fieldSetFlags()[3] = true;
      }
      this.authorBuilder = null;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'publish_date' field.
      * @return The value.
      */
    public java.lang.Object getPublishDate() {
      return publish_date;
    }


    /**
      * Sets the value of the 'publish_date' field.
      * @param value The value of 'publish_date'.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder setPublishDate(java.lang.Object value) {
      validate(fields()[1], value);
      this.publish_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'publish_date' field has been set.
      * @return True if the 'publish_date' field has been set, false otherwise.
      */
    public boolean hasPublishDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'publish_date' field.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder clearPublishDate() {
      publish_date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Object getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder setPrice(java.lang.Object value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder clearPrice() {
      price = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * @return The value.
      */
    public com.meynier.kafka.avro.model.AvroAuthor getAuthor() {
      return author;
    }


    /**
      * Sets the value of the 'author' field.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder setAuthor(com.meynier.kafka.avro.model.AvroAuthor value) {
      validate(fields()[3], value);
      this.authorBuilder = null;
      this.author = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'author' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.meynier.kafka.avro.model.AvroAuthor.Builder getAuthorBuilder() {
      if (authorBuilder == null) {
        if (hasAuthor()) {
          setAuthorBuilder(com.meynier.kafka.avro.model.AvroAuthor.newBuilder(author));
        } else {
          setAuthorBuilder(com.meynier.kafka.avro.model.AvroAuthor.newBuilder());
        }
      }
      return authorBuilder;
    }

    /**
     * Sets the Builder instance for the 'author' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.meynier.kafka.avro.model.AvroBook.Builder setAuthorBuilder(com.meynier.kafka.avro.model.AvroAuthor.Builder value) {
      clearAuthor();
      authorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'author' field has an active Builder instance
     * @return True if the 'author' field has an active Builder instance
     */
    public boolean hasAuthorBuilder() {
      return authorBuilder != null;
    }

    /**
      * Clears the value of the 'author' field.
      * @return This builder.
      */
    public com.meynier.kafka.avro.model.AvroBook.Builder clearAuthor() {
      author = null;
      authorBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroBook build() {
      try {
        AvroBook record = new AvroBook();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.publish_date = fieldSetFlags()[1] ? this.publish_date :  defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price :  defaultValue(fields()[2]);
        if (authorBuilder != null) {
          try {
            record.author = this.authorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("author"));
            throw e;
          }
        } else {
          record.author = fieldSetFlags()[3] ? this.author : (com.meynier.kafka.avro.model.AvroAuthor) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroBook>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroBook>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroBook>
    READER$ = (org.apache.avro.io.DatumReader<AvroBook>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










